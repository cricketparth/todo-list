[{"/Users/parthpathak/Documents/todo list/todo-list/src/index.js":"1","/Users/parthpathak/Documents/todo list/todo-list/src/App.js":"2","/Users/parthpathak/Documents/todo list/todo-list/src/Project.js":"3"},{"size":198,"mtime":1645594415710,"results":"4","hashOfConfig":"5"},{"size":2674,"mtime":1645686972118,"results":"6","hashOfConfig":"5"},{"size":921,"mtime":1645686968726,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hqn1ux",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/parthpathak/Documents/todo list/todo-list/src/index.js",[],[],"/Users/parthpathak/Documents/todo list/todo-list/src/App.js",["18"],[],"import React ,{useState ,useEffect} from \"react\";\nimport \"./App.css\";\nimport Project from './Project';\n\nconst App = () => {\n  const [list, setList] = React.useState([]);\n  const [todo, setTodo] = React.useState(\"\");\n  const [todoEditing, setTodoEditing] = useState(null);\n  const [editingText, setEditingText] = useState(\"\");\n\n  useEffect(() => {\n    const json = localStorage.getItem(\"list\");\n    const loadedlist = JSON.parse(json);\n    if (loadedlist) {\n      setList(loadedlist);\n    }\n  }, []);\n\n  useEffect(() => {\n    const json = JSON.stringify(list);\n    localStorage.setItem(\"list\", json);\n  }, [list]);\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    const newTodo = {\n      id: new Date().getTime(),\n      text: todo,\n      completed: false,\n    };\n    setList([...list].concat(newTodo));\n    setTodo(\"\");\n  }\n\n  function deleteTodo(id) {\n    let updatedlist = [...list].filter((todo) => todo.id !== id);\n    setList(updatedlist);\n  }\n\n  function toggleComplete(id) {\n    let updatedlist = [...list].map((todo) => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n    setList(updatedlist);\n  }\n\n  function submitEdits(id) {\n    const updatedlist = [...list].map((todo) => {\n      if (todo.id === id) {\n        todo.text = editingText;\n      }\n      return todo;\n    });\n    setList(updatedlist);\n    setTodoEditing(null);\n  }\n\n  return (\n    <div id=\"todo-list\">\n      <h1>Todo List</h1>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          onChange={(e) => setTodo(e.target.value)}\n          value={todo}\n        />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n      {list.map((todo) => (\n        <div key={todo.id} className=\"todo\">\n          <div className=\"todo-text\">\n            <input\n              type=\"checkbox\"\n              id=\"completed\"\n              checked={todo.completed}\n              onChange={() => toggleComplete(todo.id)}\n            />\n            {todo.id === todoEditing ? (\n              <input\n                type=\"text\"\n                onChange={(e) => setEditingText(e.target.value)}\n              />\n            ) : (\n              <div>{todo.text}</div>\n            )}\n          </div>\n          <div className=\"todo-actions\">\n            {todo.id === todoEditing ? (\n              <button onClick={() => submitEdits(todo.id)}>Submit Edits</button>\n            ) : (\n              <button onClick={() => setTodoEditing(todo.id)}>Edit</button>\n            )}\n\n            <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n","/Users/parthpathak/Documents/todo list/todo-list/src/Project.js",["19","20"],[],{"ruleId":"21","severity":1,"message":"22","line":3,"column":8,"nodeType":"23","messageId":"24","endLine":3,"endColumn":15},{"ruleId":"21","severity":1,"message":"25","line":4,"column":18,"nodeType":"23","messageId":"24","endLine":4,"endColumn":25},{"ruleId":"26","severity":2,"message":"27","line":25,"column":28,"nodeType":"23","messageId":"28","endLine":25,"endColumn":38},"no-unused-vars","'Project' is defined but never used.","Identifier","unusedVar","'setShow' is assigned a value but never used.","no-undef","'addProject' is not defined.","undef"]